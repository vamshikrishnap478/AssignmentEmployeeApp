name: Docker Build and Merge

on:
  push: 
    branches:
      - '**'

permissions:
  contents: write
  packages: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: ./EmployeeApp
          file: ./EmployeeApp/Dockerfile
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/employeeapi:latest
            ghcr.io/${{ github.repository_owner }}/employeeapi:${{ github.sha }}

  auto-merge:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Auto-merge release/* → master
        if: startsWith(github.ref, 'refs/heads/release/')
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"
          git fetch origin master
          git checkout master
          git merge ${GITHUB_REF#refs/heads/} --no-edit
          git push origin master
  deploy:
    runs-on: ubuntu-latest
    needs: auto-merge
    steps:
      - name: Deploy to Server
        env:
          IMAGE_TAG: ghcr.io/${{ github.repository_owner }}/employeeapi:${{ github.sha }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_KEY: ${{ secrets.SSH_KEY }}
        run: |
          echo "$SSH_KEY" > key.pem
          chmod 600 key.pem
          ssh -o StrictHostKeyChecking=no -i key.pem $SSH_USER@$SSH_HOST << EOF
            docker pull $IMAGE_TAG
            docker stop employeeapp || true
            docker rm employeeapp || true
            docker run -d -p 8080:8080 --name employeeapp $IMAGE_TAG
          EOF